def uav_x -2.0
def uav_y 2
def uav_z -1.0
def uav_roll 10
def uav_pitch 90
def uav_yaw 0
def prop_radius 0.22
def arm_len 0.4
def pointer_coef 1.0


def centroid1{
  def n_joint_faces 25
  def sphere_radius 0.05
  sweep [fillcolor=black, linecolor=black, strokeopacity=1, linewidth=0.001, opacity=1] { n_joint_faces, rotate(360 / n_joint_faces, [0, 1, 0]) }
    sweep { n_joint_faces, rotate(360 / n_joint_faces) }
      (0, -sphere_radius)

%  special |\scriptsize
%    \uput{2pt}[ul]#1{$\mathcal{c}_S_i$}|
%    (0.5, 0.1, 0)
}



def sphere1 {
  def n_joint_faces 25
  def sphere_radius 0.68
  sweep [fillcolor=red, linecolor=red, strokeopacity=0.05, linewidth=0.001, opacity=0.2] { n_joint_faces, rotate(360 / n_joint_faces, [0, 1, 0]) }
    sweep { n_joint_faces, rotate(360 / n_joint_faces) }
      (0, -sphere_radius)

  line[linecolor=black, arrows=*->] (0,0,0)(0,0,sphere_radius)

  special |\scriptsize
    \uput{2pt}[ul]#1{$\delta_i$}|
    (0.5, 0.1, 0)
}


def hemi_sphere_front {
  def n_joint_faces 25
  def sphere_radius 3

  sweep [fillcolor=blue, linecolor=blue, strokeopacity=0.05, linewidth=0.001, opacity=0.2] {n_joint_faces, rotate(360 / n_joint_faces, [0, 1, 0])}
  sweep { n_joint_faces, rotate(120 / n_joint_faces) }
  (0, -sphere_radius)

  line[linecolor=black, arrows=*->] (0,0,0)(0,-sphere_radius,0)
  special |\scriptsize
    \uput{2pt}[ul]#1{$r_{s,i}$}|
    (1.5, -1.5, 0.35)
}

def hemi_sphere_back {
  def n_joint_faces 25
  def sphere_radius 3

  sweep [fillcolor=blue, linecolor=blue, strokeopacity=0.05, linewidth=0.001, opacity=0.1] {n_joint_faces, rotate(360 / n_joint_faces, [0, 1, 0])}
  sweep { n_joint_faces, rotate(-120 / n_joint_faces) }
  (0, sphere_radius)
}


def hemi_sphere_front_rest {
  def n_joint_faces 25
  def sphere_radius 3

  sweep [fillcolor=green, linecolor=green, strokeopacity=0.05, linewidth=0.001, opacity=0.2] {n_joint_faces, rotate(360 / n_joint_faces, [0, 1, 0])}
  sweep { n_joint_faces, rotate(60 / n_joint_faces) }
  (0, -sphere_radius)

}

def hemi_sphere_back_rest {
  def n_joint_faces 25
  def sphere_radius 3

  sweep [fillcolor=green, linecolor=green, strokeopacity=0.05, linewidth=0.001, opacity=0.1] {n_joint_faces, rotate(360 / n_joint_faces, [0, 1, 0])}
  sweep { n_joint_faces, rotate(-60 / n_joint_faces) }
  (0, sphere_radius)
}




% %{ coordinates

def coordinates {

  def size 1

  line[arrows=->] (0, 0, 0)(size, 0, 0)

  special |\scriptsize
    \uput{2pt}[ul]#1{$\mathbf{x}$}|
    (size, 0, 0)

  line[arrows=->] (0, 0, 0)(0, size, 0)

  special |\scriptsize
    \uput{2pt}[ul]#1{$\mathbf{y}$}|
    (0, size, 0)

  line[arrows=->] (0, 0, 0)(0, 0, size)

  special |\scriptsize
    \uput{2pt}[ul]#1{$\mathbf{z}$}|
    (0, 0, size)
}

% %}

% %{ heading

def heading {

  line[arrows=->] (0.0,0,0)(1.0,0,0.0)

  def n_segs 64
  sweep [linecolor=red] { n_segs, rotate(-(uav_pitch-90.0) / n_segs, (0,0.00,0), [0,1,0]) } (1.0,0.00,0)

  special |\scriptsize
    \uput{2pt}[ul]#1{$\eta$}|
    (1.20, -0.4, 0)

  special |\scriptsize
    \uput{2pt}[ul]#1{$\mathbf{h}$}|
    (1.0, 0.1, 0)
}

% %}

% %{ propeller

def propeller {

  def n_segs 64
  sweep { n_segs<>, rotate(360 / n_segs, (0,0,0), [0,1,0]) } line[linecolor=gray](-prop_radius,0,0)(0,0,0)
}

% %}

% %}

% %{ camera_coordinates


% %}

% %{ quadrotor

def quadrotor {

  def arrow_len 0.7

  def p1 (0.7*arm_len, 0, 0.7*arm_len)
  def p2 (0.7*arm_len, 0, -0.7*arm_len)
  def stred (0,0,0)
  def p3 (-0.7*arm_len, 0, 0.7*arm_len)
  def p4 (-0.7*arm_len, 0, -0.7*arm_len)

  put { translate([0.7*arm_len,0.01,0.7*arm_len]) } {propeller}
  put { translate([-0.7*arm_len,0.01,0.7*arm_len]) } {propeller}
  put { translate([0.7*arm_len,0.01,-0.7*arm_len]) } {propeller}
  put { translate([-0.7*arm_len,0.01,-0.7*arm_len]) } {propeller}

  %def p44 (arrow_len,0,0)
  %def p11 (0,0,-arrow_len)

  %line[linecolor=black, arrows=->] (stred)(arrow_len,0,0)
  %line[linecolor=black, arrows=->] (stred)(0,0,-arrow_len)
  %line[linecolor=black, arrows=->] (0,0,0)(0,arrow_len,0)

  % special |\scriptsize
  %   \uput{2pt}[u]#1{$\mathbf{\hat{b}}_y$}
  %   \uput[d]#2{$\mathbf{\hat{b}}_x$}|
  %   (0.0, 0, -arrow_len)(arrow_len, 0.0, 0)

  % special |\scriptsize
  %   \uput{2pt}[ul]#1{$\mathbf{\hat{b}}_z$}|
  %   (0.0, arrow_len, 0)

  % special |\scriptsize
  %   \uput{2pt}[ul]#1{$\mathcal{B}$}|
  %   (0.26, -0.3, 0)

  % put { rotate(90, (0,0,0), [0,1,0]) then translate([0.8, 0.0, 0.0]) } {camera_coordinates}
}

% %}

% %{ world coordinates

def world_coordinates {

  special |\scriptsize
    \uput{2pt}[ul]#1{$\mathcal{W}$}|
    (0.2, 0.0, 0)

  def ax_len 0.7

  line[arrows=->] (0, 0, 0)(-ax_len, 0, 0)

  special |\scriptsize
    \uput{0pt}[ur]#1{$\mathbf{\hat{w}}_y$}|
    (-ax_len, 0.0, 0)

  line[arrows=->] (0, 0, 0)(0, 0, -ax_len)

  special |\scriptsize
    \uput{2pt}[ul]#1{$\mathbf{\hat{w}}_x$}|
    (0.6, 0.0, -ax_len-0.5)

  line[arrows=->] (0, 0, 0)(0, ax_len, 0)

  special |\scriptsize
    \uput{2pt}[ul]#1{$\mathbf{\hat{w}}_z$}|
    (0, ax_len, 0)
}

% %}

% %{ grid

def grid {

  def grid_x 3
  def grid_y 5
  def cell_size 1

  def x_offset -(grid_x*cell_size)
  def y_offset -(grid_y*cell_size)

  put { translate ([y_offset, 0, x_offset]) }
    sweep [cull=false, linecolor=lightgray] { grid_x, translate([0,0,cell_size]) }
      sweep [cull=false] { grid_y, translate([cell_size,0,0]) }
        (0, 0, 0)
}

% %}

def scene {

  %{world_coordinates}
  %put {translate ([0, -0.01, 0])} {grid}

  put {
    rotate(uav_roll, (0,0,0), [1,0,0]) then
    rotate(uav_pitch, (0,0,0), [0,1,0]) then
    rotate(uav_yaw, (0,0,0), [0,0,1]) then
    translate ([uav_x, uav_y, uav_z])
  } {quadrotor}

  put {
  translate([uav_x, uav_y, uav_z])
  } {sphere1}

  put {
    rotate(-135, (0,0,0), [1,0,0]) then
    rotate(20, (0,0,0), [0,1,0]) then
    translate([uav_x, uav_y, uav_z])
  } {hemi_sphere_front}
  put {
    rotate(180, (0,0,0), [0,0,1]) then
    rotate(-135, (0,0,0), [1,0,0]) then
    rotate(20, (0,0,0), [0,1,0]) then
    translate([uav_x, uav_y, uav_z])
  } {hemi_sphere_back}

  put {
    rotate(45, (0,0,0), [1,0,0]) then
    rotate(20, (0,0,0), [0,1,0]) then
    translate([uav_x, uav_y, uav_z])
  } {hemi_sphere_front_rest}
  put {
    rotate(180, (0,0,0), [0,0,1]) then
    rotate(45, (0,0,0), [1,0,0]) then
    rotate(20, (0,0,0), [0,1,0]) then
    translate([uav_x, uav_y, uav_z])
  } {hemi_sphere_back_rest}
  
  put {
    rotate(uav_roll, (0,0,0), [1,0,0]) then
    rotate(uav_pitch, (0,0,0), [0,1,0]) then
    rotate(uav_yaw, (0,0,0), [0,0,1]) then
    translate ([2.0, 1.0, -4.0])
  } {quadrotor}

  put{
    translate([uav_x+3., uav_y-0.1, uav_z-3.])
  } {centroid1}

  special |\scriptsize
    \uput{2pt}[ul]#1{$r_{s,i}$}|
    (1.5, -1.5, 0.35)
  
  
}

def eye (20.0,6.0,-7.0)
def look_at (-5,-5,5)

put { view((eye), (look_at)) then perspective(30.0) } {scene}
% put { view((eye), (look_at)) } {scene}
